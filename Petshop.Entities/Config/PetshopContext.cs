// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Petshop.Entities.EntitiesContext;

namespace Petshop.Entities.Config
{
    public partial class PetshopContext : DbContext
    {
        public PetshopContext()
        {
        }

        public PetshopContext(DbContextOptions<PetshopContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Categoria> Categoria { get; set; }
        public virtual DbSet<Cidade> Cidade { get; set; }
        public virtual DbSet<Cliente> Cliente { get; set; }
        public virtual DbSet<Endereco> Endereco { get; set; }
        public virtual DbSet<Especie> Especie { get; set; }
        public virtual DbSet<Estado> Estado { get; set; }
        public virtual DbSet<Funcionario> Funcionario { get; set; }
        public virtual DbSet<PagCartao> PagCartao { get; set; }
        public virtual DbSet<PagDinheiro> PagDinheiro { get; set; }
        public virtual DbSet<Pagamento> Pagamento { get; set; }
        public virtual DbSet<Pessoa> Pessoa { get; set; }
        public virtual DbSet<Pet> Pet { get; set; }
        public virtual DbSet<Produto> Produto { get; set; }
        public virtual DbSet<Raca> Raca { get; set; }
        public virtual DbSet<Servico> Servico { get; set; }
        public virtual DbSet<ServicoProduto> ServicoProduto { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer(ConnectionStrings.DBConnection);
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Cidade>(entity =>
            {
                entity.HasOne(d => d.IdEstadoNavigation)
                    .WithMany(p => p.Cidade)
                    .HasForeignKey(d => d.IdEstado)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Cidade_Estado");
            });

            modelBuilder.Entity<Cliente>(entity =>
            {
                entity.HasOne(d => d.IdPessoaNavigation)
                    .WithMany(p => p.Cliente)
                    .HasForeignKey(d => d.IdPessoa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Cliente_Pessoa");
            });

            modelBuilder.Entity<Endereco>(entity =>
            {
                entity.HasOne(d => d.IdCidadeNavigation)
                    .WithMany(p => p.Endereco)
                    .HasForeignKey(d => d.IdCidade)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Endereco_Cidade");

                entity.HasOne(d => d.IdPessoaNavigation)
                    .WithMany(p => p.Endereco)
                    .HasForeignKey(d => d.IdPessoa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Endereco_Pessoa");
            });

            modelBuilder.Entity<Funcionario>(entity =>
            {
                entity.HasOne(d => d.IdPessoaNavigation)
                    .WithMany(p => p.Funcionario)
                    .HasForeignKey(d => d.IdPessoa)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Funcionario_Pessoa");
            });

            modelBuilder.Entity<Pagamento>(entity =>
            {
                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.Pagamento)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Pagamento_Servico");
            });

            modelBuilder.Entity<Pet>(entity =>
            {
                entity.HasOne(d => d.IdEspecieNavigation)
                    .WithMany(p => p.Pet)
                    .HasForeignKey(d => d.IdEspecie)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Pet_Especie");

                entity.HasOne(d => d.IdRacaNavigation)
                    .WithMany(p => p.Pet)
                    .HasForeignKey(d => d.IdRaca)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Pet_Raca");
            });

            modelBuilder.Entity<Produto>(entity =>
            {
                entity.HasOne(d => d.IdCategoriaNavigation)
                    .WithMany(p => p.Produto)
                    .HasForeignKey(d => d.IdCategoria)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Produto_Categoria");
            });

            modelBuilder.Entity<Servico>(entity =>
            {
                entity.HasOne(d => d.IdClienteNavigation)
                    .WithMany(p => p.Servico)
                    .HasForeignKey(d => d.IdCliente)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Servico_Cliente");

                entity.HasOne(d => d.IdFuncionarioNavigation)
                    .WithMany(p => p.Servico)
                    .HasForeignKey(d => d.IdFuncionario)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Servico_Funcionario");

                entity.HasOne(d => d.IdPetNavigation)
                    .WithMany(p => p.Servico)
                    .HasForeignKey(d => d.IdPet)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Servico_Pet");
            });

            modelBuilder.Entity<ServicoProduto>(entity =>
            {
                entity.HasOne(d => d.IdProdutoNavigation)
                    .WithMany(p => p.ServicoProduto)
                    .HasForeignKey(d => d.IdProduto)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServicoProduto_Produto");

                entity.HasOne(d => d.IdServicoNavigation)
                    .WithMany(p => p.ServicoProduto)
                    .HasForeignKey(d => d.IdServico)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServicoProduto_Servico");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}